<div id="suns"></div>
<script src="javascripts/d3/d3.v3.min.js"></script>
<script type="text/javascript">
    var socket = io('/screens-namespace');

    var apiParameters = {
        sort: "random",
        color: "any",
        classification: "Paintings",
        fields: "objectid,title,url,colors,gallery,totalpageviews",
        size: 1
    };
    var query = "/data/object?" + $.param(apiParameters);

    // Chart dimensions.
    var margin = {top: 0, right: 0, bottom: 0, left: 0},
        width = $(window).width() - margin.right - margin.left,
        height = $(window).height() - margin.top - margin.bottom;

    var counter = 0;
    var threshold = 50;
    var isPaused = false;
    var busy = false;
    var isLabelsOn = false;
    var multiplier = 1;
    var speed = 1;
    var ringScaleFactor = 100;
    var planetScaleFactor = 25;
    var lightsOn = true;
    var timer;
    var systemState = 0;

    // Create the SVG container and set the origin.
    var svg = d3.select("#suns").append("svg")
        .attr("width", width)
        .attr("height", height);

    $(window).on('keydown', function (e) {
        switch (e.keyCode) {
            case 37: // left
                break;
            case 38: //up
                break;
            case 39: // right
                break;
            case 40: //down
                break;
            case 73: // i
                break;
            case 80: // p
                break;
            default:
                //do nothing
        }
    });

    $(window).on('resize', function() {
        width = $(window).width() - margin.right - margin.left;
        height = $(window).height() - margin.top - margin.bottom;

        svg.attr("width", width)
            .attr("height", height);
    });

    function doWork() {
        if (!isPaused && !busy) {
            blastColors();
            eraseColors();
        }
    }

    function blastColors() {
        busy = true;
        origin = {
            x: width/2,
            y: height/2
        };

        d3.json(query, function(artwork) {
            if (artwork) {
                
                // scrub and adjust the incoming data as needed
                artwork.records.forEach(function (d) {
                    d.colors.forEach(function(d) {
                        d.xOffset = 0;
                        d.yOffset = 0;
                    });
                });

                // start building the visualization
                var system = svg.selectAll(".systems")
                                .data(artwork.records)
                                .enter()
                                .append("g")
                                .attr("data-age", counter)
                                .attr("data-source", artwork.records[0].source)
                                .attr("class", "system")
                                .attr("transform", d => `translate(${origin.x}, ${origin.y})`);


                var entity = system.selectAll("g")
                                .data(artwork.records[0].colors)
                                .enter()
                                    .append("g")
                                    .attr("class", "entity");
   
                entity.append("circle")
                    .attr("class", "orbit")
                    .attr("r", calculateRadius)
                    .attr("cx", 0)
                    .attr("cy", 0)
                    .style("fill", d => d.color)
                    .style("fill-opacity", 1.0)
                    .style("stroke", d => d.color);

                entity.append('circle')
                    .attr('class', 'planet')
                    .attr('cx', calculateRadius)
                    .attr('r', calculatePlanetRadius)
                    .style('opacity', 0.0)
                    .style('fill', d => d.color);  

                system.append("text")
                    .style("opacity", isLabelsOn ? 1 : 0)
                    .text(d => d.title);  

                if (artwork.records[0].gallery) {
                    system.append("text")
                        .attr("dx", 0)
                        .attr("dy", 20)
                        .style("opacity", isLabelsOn ? 1 : 0)
                        .text(function(d) {return "Visit me in gallery " + d.gallery.gallerynumber + " on floor " + d.gallery.floor; });  
                }

                activateSystems();

                system.transition()
                    .attr("transform", generateRandomTranslation)
                    .duration(function(d) {return (100*speed)*d.totalpageviews;})
                    .delay(400);

                socket.emit("new sun", {
                    "url": artwork.records[0].url,
                    "title": artwork.records[0].title,
                    "objectid": artwork.records[0].objectid,
                    "colors": artwork.records[0].colors
                });

                counter++;
            }
            busy = false;
        });
    }

    function calculateRadius(d) {
        return d.percent*(multiplier*ringScaleFactor);
    }

    function calculatePlanetRadius(d) {
        return d.percent*(multiplier*planetScaleFactor);
    }

    function generateRandomTranslation() {
        var x = getRandomInt(0, width);
        var y = getRandomInt(0, height);
        
        return "translate(" + x + ", " + y + ")";
    }

    function getRandomInt(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive
    }

    function scaleSuns() {
        d3.selectAll(".orbit")
            .transition()
            .attr("r", calculateRadius)
            .delay(200);

        d3.selectAll(".planet")
            .transition()
            .attr('cx', calculateRadius)
            .attr('r', calculatePlanetRadius)
            .delay(200);
    }

    function setSpeed() {
        window.clearInterval(timer);
        timer = window.setInterval(doWork, 1000*speed);
    }

    function eraseColors() {
        var deadAge = counter - threshold;

        d3.selectAll("g[data-age='" + deadAge + "']")
            .transition()
                .style("opacity", "0")
                .duration(1000)
                .each("end", function() {d3.select(this).remove();});
    }

    function setLights(duration) {
        var color;
        if (lightsOn) {
            color = "#ffffff";
        } else {
            color = "#000000";
        }

        d3.select("#suns")  
            .transition()
            .ease("exp-in")
            .style("background", color)
            .duration(duration);        
    }

    function deconstruct() {
        d3.selectAll(".orbit")
            .transition()
            .attr("cx", function(d) {var offset = getRandomInt(-50, 50); d.xOffset += offset; d3.select(this).attr("d", d); return parseInt(d3.select(this).attr("cx")) + offset})
            .attr("cy", function(d) {var offset = getRandomInt(-50, 50); d.yOffset += offset; d3.select(this).attr("d", d); return parseInt(d3.select(this).attr("cy")) + offset})
            .duration(500);
    }

    function reconstruct() {
        d3.selectAll(".orbit")
            .transition()
            .attr("cx", function(d) {var xOffsetOld = d.xOffset; d.xOffset = 0; return 0})
            .attr("cy", function(d) {var yOffsetOld = d.yOffset; d.yOffset = 0; return 0})
            .duration(500);        
    }

    function activateSystems() {
        if (systemState === 1) {
            d3.selectAll('.planet')
                .transition()
                    .style('opacity', 1.0)  
                    .duration(870);        
    
            d3.selectAll('.orbit')
                .transition()
                    .style('fill-opacity', 0.0)
                    .duration(870);
            
            d3.selectAll('.entity')
                .style('animation-duration', d => `${d.percent * 200}s`)
                .style('animation-play-state', 'running')
                .classed('rotate-path', true);

        } else {
            d3.selectAll('.planet')
            .transition()
                .style('opacity', 0.0)  
                .duration(870);        

            d3.selectAll('.orbit')
                .transition()
                    .style('fill-opacity', 1.0)
                    .duration(870);
            
            d3.selectAll('.entity')
                .style('animation-play-state', 'paused');
        }
    }

    socket.on("start up", function(data) {
        multiplier = data.scaleMultiplier;
        isLabelsOn = data.labelsOn;
        speed = data.scaleMultiplier;
        lightsOn = data.lightsOn;
        isPaused = data.paused;
        systemState = data.systemState;

        scaleSuns();
        setSpeed();
        setLights(500);
    });

    socket.on("object clicked", function(objectid) {
        // do something awesome and spacey
    });

    socket.on("pause clicked", function() {
        isPaused = !isPaused;
    });

    socket.on("tell-me clicked", function() {
        isLabelsOn = !isLabelsOn;
        d3.selectAll("text").style("opacity", isLabelsOn ? 1 : 0);
    });

    socket.on("lights clicked", function(data) {
        lightsOn = data;
        setLights(500);
    });

    socket.on("scatter clicked", function() {
        d3.selectAll(".system")  
            .transition()
            .attr("transform", generateRandomTranslation)
            .duration(function(d) {return (100*speed)*d.totalpageviews;});
    });

    socket.on("deconstruct clicked", function() {
        deconstruct();
    });

    socket.on("reconstruct clicked", function() {
        reconstruct();
    });

    socket.on("systematizer clicked", function(data) {
        systemState = data;
        activateSystems();
    });

    socket.on("end-times clicked", function() {
        isPaused = true;
        
        socket.emit("end-times started");

        d3.selectAll(".orbits")
            .transition();

        lightsOn = false;
        setLights(1000);

        d3.selectAll("text")  
            .transition()
            .ease("exp-in")
            .style("opacity", 0.000001)
            .duration(750);

        d3.selectAll("circle")  
            .transition()
            .delay(function() {return getRandomInt(0, 500)})
            .ease("exp-in")
            .attr("r", 0)
            .duration(750);

        setTimeout(function() {
            d3.selectAll(".system")
                .remove();

            socket.emit("end-times ended");
        }, 5000);
    });

    socket.on("big-bang clicked", function() {
        //bang on
        isPaused = true;

        socket.emit("big-bang started");

        d3.selectAll(".orbits")
            .transition();

        //move all the suns to the center of the screen; pause a moment; the scatter them in random directions
        d3.selectAll(".system")  
            .transition()
                .ease("exp-in")
                .attr("transform", `translate(${origin.x}, ${origin.y})`)
                .duration(1500)
            .transition()
                .delay(5000)    
                .ease("exp-out")
                .attr("transform", generateRandomTranslation)
                .duration(500);

        //scale the suns down to nothing; pause a moment; restore them to their actual size
        d3.selectAll("circle")
            .transition()
                .ease("exp-in")
                .attr("r", 0)
                .duration(1500)
            .transition()
                .delay(5000)
                .ease("exp-out")
                .attr("r", calculateRadius)
                .duration(500);

        //cast the universe into darkness
        lightsOn = false;
        setLights(1500);   

        setTimeout(function() {
            socket.emit("big-bang ended");
        }, 4500);                      
    });

    socket.on("set multiplier", function(value) {
        multiplier = value;
        scaleSuns();
    })

    socket.on("set speed multiplier", function(value) {
        speed = value;
        setSpeed();
    })
</script>