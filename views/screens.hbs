<div id="suns"></div>
<script src="javascripts/d3/d3.v3.min.js"></script>
<script type="text/javascript">

    d3.selection.prototype.moveToFront = function() {  
        return this.each(function(){
            this.parentNode.appendChild(this);
        });
    };

    var socket = io('/screens-namespace');

    var apiParameters = {
        sort: "random",
        color: "any",
        fields: "objectid,title,url,colors,gallery",
        size: 1
    };
    var apiQuery = "/data/object?" + $.param(apiParameters);

    // Chart dimensions.
    var margin = {top: 0, right: 0, bottom: 0, left: 0},
        width = $(window).width() - margin.right - margin.left,
        height = $(window).height() - margin.top - margin.bottom;

    var counter = 0;
    var threshold = 50;
    var isPaused = false;
    var multiplier = 1;
    var ringScaleFactor = 100;
    var lightsOn = true;

    // Create the SVG container and set the origin.
    var svg = d3.select("#suns").append("svg")
        .attr("width", width)
        .attr("height", height);

    var sunsCanvas = svg.append("g")
        .attr("transform", "translate(0,0)");

    window.setInterval(doWork, 1000);

    $(window).on('keydown', function (e) {
        switch (e.keyCode) {
            case 37: // left
                break;
            case 38: //up
                setLights();
                break;
            case 39: // right
                break;
            case 40: //down
                break;
            case 73: // i
                break;
            case 80: // p
                isPaused = !isPaused;
                break;
            default:
                //do nothing
        }
    });

    $(window).on('resize', function() {
        width = $(window).width() - margin.right - margin.left;
        height = $(window).height() - margin.top - margin.bottom;

        svg.attr("width", width)
            .attr("height", height);
    });

    function doWork() {
        if (!isPaused) {
            blastColors();
            eraseColors();
        }
    }

    function blastColors() {
        d3.json(apiQuery, function(artwork) {
            var g = sunsCanvas.append("g")
                    .attr("data-age", counter)
                    .attr("class", "sun");

            var a = g.selectAll(".dots")
                    .data(artwork.records)
                .enter().append("g")
                    .attr("class", "dots");

            a.selectAll(".dot")
                    .data(function(d) {return d.colors;})
                .enter().append("circle")
                    .attr("class", "dot")
                    .style("fill", function(d) { return d.color; })
                    .attr("cx", width/2)
                    .attr("cy", height/2)
                    .attr("r", calculateRadius);

            a.append("text")
                .attr("dx", width/2)
                .attr("dy", height/2)
                .text(function(d) {return d.title; });  

            if (artwork.records[0].gallery) {
                a.append("text")
                    .attr("dx", width/2)
                    .attr("dy", height/2 + 20)
                    .text(function(d) {return "Visit me in gallery " + d.gallery.gallerynumber + " on floor " + d.gallery.floor; });  
            }

            a.transition()
                .attr("transform", generateRandomTranslation)
                .delay(400);

            socket.emit("new sun", {
                "url": artwork.records[0].url,
                "title": artwork.records[0].title,
                "objectid": artwork.records[0].objectid,
                "colors": artwork.records[0].colors
            });

            counter++;
        });
    }

    function calculateRadius(d) {
        return d.percent*(multiplier*ringScaleFactor);
    }

    function generateRandomTranslation() {
        var x =  Math.floor(((Math.random() * 2) - 1) * width/2);
        var y = -Math.floor(((Math.random() * 2) - 1) * height/2);

        return "translate(" + x + ", " + y + ")";
    }

    function getRandomInt(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive
    }

    function scaleSuns() {
        d3.selectAll(".dot")
            .transition()
            .attr("r", calculateRadius)
            .delay(200);
    }

    function eraseColors() {
        var deadAge = counter - threshold;

        d3.selectAll("g[data-age='" + deadAge + "']")
            .transition()
                .style("opacity", "0")
                .duration(1000)
                .each("end", function() {d3.select(this).remove();});
    }

    function setLights() {
        lightsOn = !lightsOn;

        if (lightsOn) {
            d3.select("#suns").style("background", "#ffffff");
        } else {
            d3.select("#suns").style("background", "#000000");  
        }
    }

    socket.on("start up", function(data) {
        multiplier = data.scaleMultiplier;
        scaleSuns();
    });

    socket.on("object clicked", function(objectid) {
        var s = d3.selectAll(".dots")
            .filter(function(d) {return d.objectid === objectid})
        
        s.each(function() {
            d3.select(this.parentNode).moveToFront();
        })
    });

    socket.on("pause clicked", function() {
        isPaused = !isPaused;
    });

    socket.on("lights clicked", function() {
        setLights();
    });

    socket.on("scatter clicked", function() {
        d3.selectAll(".dots")  
            .transition()
            .attr("transform", generateRandomTranslation)
            .duration(1500);
    });

    socket.on("end-times clicked", function() {
        isPaused = true;
        lightsOn = false;

        socket.emit("end-times started");

        d3.selectAll(".dots")
            .transition();

        d3.select("#suns")  
            .transition()
            .ease("exp-in")
            .style("background", "#000000")
            .duration(1000);

        d3.selectAll("text")  
            .transition()
            .ease("exp-in")
            .style("opacity", 0.000001)
            .duration(750);

        d3.selectAll(".dot")  
            .transition()
            .delay(function() {return getRandomInt(0, 500)})
            .ease("exp-in")
            .attr("r", 0)
            .duration(750);

        setTimeout(function() {
            lightsOn = true;

            d3.selectAll(".sun")
                .remove();

            d3.select("#suns")  
                .transition()
                .ease("exp-in")
                .style("background", "#ffffff")
                .duration(750)
                .each("end", function() {isPaused = false});

            socket.emit("end-times ended");
        }, 5000);
    });

    socket.on("big-bang clicked", function() {
        //bang on
        isPaused = true;

        socket.emit("big-bang started");

        d3.selectAll(".dots")
            .transition();

        //move all the suns to the center of the screen; pause a moment; the scatter them in random directions
        d3.selectAll(".dots")  
            .transition()
                .ease("exp-in")
                .attr("transform", "translate(0,0)")
                .duration(1500)
            .transition()
                .delay(5000)    
                .ease("exp-out")
                .attr("transform", generateRandomTranslation)
                .duration(500)
                .each("end", function() {isPaused = false});

        //scale the suns down to nothing; pause a moment; restore them to their actual size
        d3.selectAll(".dot")
            .transition()
                .ease("exp-in")
                .attr("r", 0)
                .duration(1500)
            .transition()
                .delay(5000)
                .ease("exp-out")
                .attr("r", calculateRadius)
                .duration(500);

        d3.select("#suns")  
            .transition()
                .ease("exp-in")
                .style("background", "#000000")
                .duration(1500)
            .transition()
                .delay(5000)
                .ease("exp-out")
                .style("background", "#ffffff")
                .duration(500);       

        setTimeout(function() {
            lightsOn = true;

            socket.emit("big-bang ended");
        }, 7500);                      
    });

    socket.on("set multiplier", function(value) {
        multiplier = value;
        scaleSuns();
    })
</script>